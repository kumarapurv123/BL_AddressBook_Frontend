/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authenticateAndGetToken } from '../fn/token-controller/authenticate-and-get-token';
import { AuthenticateAndGetToken$Params } from '../fn/token-controller/authenticate-and-get-token';
import { JwtResponseDto } from '../models/jwt-response-dto';
import { refreshToken } from '../fn/token-controller/refresh-token';
import { RefreshToken$Params } from '../fn/token-controller/refresh-token';


/**
 * login and refresh token
 */
@Injectable({ providedIn: 'root' })
export class TokenControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `refreshToken()` */
  static readonly RefreshTokenPath = '/auth/v1/refreshToken';

  /**
   * Refresh Token.
   *
   * Refresh Token
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `refreshToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  refreshToken$Response(params: RefreshToken$Params, context?: HttpContext): Observable<StrictHttpResponse<JwtResponseDto>> {
    return refreshToken(this.http, this.rootUrl, params, context);
  }

  /**
   * Refresh Token.
   *
   * Refresh Token
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `refreshToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  refreshToken(params: RefreshToken$Params, context?: HttpContext): Observable<JwtResponseDto> {
    return this.refreshToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<JwtResponseDto>): JwtResponseDto => r.body)
    );
  }

  /** Path part for operation `authenticateAndGetToken()` */
  static readonly AuthenticateAndGetTokenPath = '/auth/v1/login';

  /**
   * Authenticate and get Token.
   *
   * Authenticate and get Token
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authenticateAndGetToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticateAndGetToken$Response(params: AuthenticateAndGetToken$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return authenticateAndGetToken(this.http, this.rootUrl, params, context);
  }

  /**
   * Authenticate and get Token.
   *
   * Authenticate and get Token
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authenticateAndGetToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authenticateAndGetToken(params: AuthenticateAndGetToken$Params, context?: HttpContext): Observable<string> {
    return this.authenticateAndGetToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
