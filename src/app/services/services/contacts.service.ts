/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addContact } from '../fn/contacts/add-contact';
import { AddContact$Params } from '../fn/contacts/add-contact';
import { ContactDto } from '../models/contact-dto';
import { deleteContact } from '../fn/contacts/delete-contact';
import { DeleteContact$Params } from '../fn/contacts/delete-contact';
import { getAllContacts } from '../fn/contacts/get-all-contacts';
import { GetAllContacts$Params } from '../fn/contacts/get-all-contacts';
import { getContactById } from '../fn/contacts/get-contact-by-id';
import { GetContactById$Params } from '../fn/contacts/get-contact-by-id';
import { updateContact } from '../fn/contacts/update-contact';
import { UpdateContact$Params } from '../fn/contacts/update-contact';


/**
 * Operations related to contacts
 */
@Injectable({ providedIn: 'root' })
export class ContactsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getContactById()` */
  static readonly GetContactByIdPath = '/api/contacts/{id}';

  /**
   * Get contact by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getContactById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getContactById$Response(params: GetContactById$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactDto>> {
    return getContactById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get contact by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getContactById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getContactById(params: GetContactById$Params, context?: HttpContext): Observable<ContactDto> {
    return this.getContactById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactDto>): ContactDto => r.body)
    );
  }

  /** Path part for operation `updateContact()` */
  static readonly UpdateContactPath = '/api/contacts/{id}';

  /**
   * Update a contact by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateContact()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContact$Response(params: UpdateContact$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactDto>> {
    return updateContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a contact by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateContact$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContact(params: UpdateContact$Params, context?: HttpContext): Observable<ContactDto> {
    return this.updateContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactDto>): ContactDto => r.body)
    );
  }

  /** Path part for operation `deleteContact()` */
  static readonly DeleteContactPath = '/api/contacts/{id}';

  /**
   * Delete a contact by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteContact()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteContact$Response(params: DeleteContact$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a contact by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteContact$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteContact(params: DeleteContact$Params, context?: HttpContext): Observable<void> {
    return this.deleteContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllContacts()` */
  static readonly GetAllContactsPath = '/api/contacts';

  /**
   * Get all contacts.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllContacts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllContacts$Response(params?: GetAllContacts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ContactDto>>> {
    return getAllContacts(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all contacts.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllContacts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllContacts(params?: GetAllContacts$Params, context?: HttpContext): Observable<Array<ContactDto>> {
    return this.getAllContacts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ContactDto>>): Array<ContactDto> => r.body)
    );
  }

  /** Path part for operation `addContact()` */
  static readonly AddContactPath = '/api/contacts';

  /**
   * Add a new contact.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addContact()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addContact$Response(params: AddContact$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactDto>> {
    return addContact(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a new contact.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addContact$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addContact(params: AddContact$Params, context?: HttpContext): Observable<ContactDto> {
    return this.addContact$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactDto>): ContactDto => r.body)
    );
  }

}
