/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { healthCheck } from '../fn/health-check/health-check';
import { HealthCheck$Params } from '../fn/health-check/health-check';
import { healthCheck1 } from '../fn/health-check/health-check-1';
import { HealthCheck1$Params } from '../fn/health-check/health-check-1';
import { healthCheck2 } from '../fn/health-check/health-check-2';
import { HealthCheck2$Params } from '../fn/health-check/health-check-2';
import { healthCheck3 } from '../fn/health-check/health-check-3';
import { HealthCheck3$Params } from '../fn/health-check/health-check-3';
import { healthCheck4 } from '../fn/health-check/health-check-4';
import { HealthCheck4$Params } from '../fn/health-check/health-check-4';
import { healthCheck5 } from '../fn/health-check/health-check-5';
import { HealthCheck5$Params } from '../fn/health-check/health-check-5';
import { healthCheck6 } from '../fn/health-check/health-check-6';
import { HealthCheck6$Params } from '../fn/health-check/health-check-6';
import { publicHealthCheck } from '../fn/health-check/public-health-check';
import { PublicHealthCheck$Params } from '../fn/health-check/public-health-check';
import { publicHealthCheck1 } from '../fn/health-check/public-health-check-1';
import { PublicHealthCheck1$Params } from '../fn/health-check/public-health-check-1';
import { publicHealthCheck2 } from '../fn/health-check/public-health-check-2';
import { PublicHealthCheck2$Params } from '../fn/health-check/public-health-check-2';
import { publicHealthCheck3 } from '../fn/health-check/public-health-check-3';
import { PublicHealthCheck3$Params } from '../fn/health-check/public-health-check-3';
import { publicHealthCheck4 } from '../fn/health-check/public-health-check-4';
import { PublicHealthCheck4$Params } from '../fn/health-check/public-health-check-4';
import { publicHealthCheck5 } from '../fn/health-check/public-health-check-5';
import { PublicHealthCheck5$Params } from '../fn/health-check/public-health-check-5';
import { publicHealthCheck6 } from '../fn/health-check/public-health-check-6';
import { PublicHealthCheck6$Params } from '../fn/health-check/public-health-check-6';

@Injectable({ providedIn: 'root' })
export class HealthCheckService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `publicHealthCheck()` */
  static readonly PublicHealthCheckPath = '/public/health-check';

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicHealthCheck()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck$Response(params?: PublicHealthCheck$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return publicHealthCheck(this.http, this.rootUrl, params, context);
  }

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicHealthCheck$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck(params?: PublicHealthCheck$Params, context?: HttpContext): Observable<string> {
    return this.publicHealthCheck$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `publicHealthCheck2()` */
  static readonly PublicHealthCheck2Path = '/public/health-check';

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicHealthCheck2()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck2$Response(params?: PublicHealthCheck2$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return publicHealthCheck2(this.http, this.rootUrl, params, context);
  }

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicHealthCheck2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck2(params?: PublicHealthCheck2$Params, context?: HttpContext): Observable<string> {
    return this.publicHealthCheck2$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `publicHealthCheck1()` */
  static readonly PublicHealthCheck1Path = '/public/health-check';

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicHealthCheck1()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck1$Response(params?: PublicHealthCheck1$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return publicHealthCheck1(this.http, this.rootUrl, params, context);
  }

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicHealthCheck1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck1(params?: PublicHealthCheck1$Params, context?: HttpContext): Observable<string> {
    return this.publicHealthCheck1$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `publicHealthCheck3()` */
  static readonly PublicHealthCheck3Path = '/public/health-check';

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicHealthCheck3()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck3$Response(params?: PublicHealthCheck3$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return publicHealthCheck3(this.http, this.rootUrl, params, context);
  }

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicHealthCheck3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck3(params?: PublicHealthCheck3$Params, context?: HttpContext): Observable<string> {
    return this.publicHealthCheck3$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `publicHealthCheck6()` */
  static readonly PublicHealthCheck6Path = '/public/health-check';

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicHealthCheck6()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck6$Response(params?: PublicHealthCheck6$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return publicHealthCheck6(this.http, this.rootUrl, params, context);
  }

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicHealthCheck6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck6(params?: PublicHealthCheck6$Params, context?: HttpContext): Observable<string> {
    return this.publicHealthCheck6$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `publicHealthCheck5()` */
  static readonly PublicHealthCheck5Path = '/public/health-check';

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicHealthCheck5()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck5$Response(params?: PublicHealthCheck5$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return publicHealthCheck5(this.http, this.rootUrl, params, context);
  }

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicHealthCheck5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck5(params?: PublicHealthCheck5$Params, context?: HttpContext): Observable<string> {
    return this.publicHealthCheck5$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `publicHealthCheck4()` */
  static readonly PublicHealthCheck4Path = '/public/health-check';

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publicHealthCheck4()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck4$Response(params?: PublicHealthCheck4$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return publicHealthCheck4(this.http, this.rootUrl, params, context);
  }

  /**
   * Public Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publicHealthCheck4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publicHealthCheck4(params?: PublicHealthCheck4$Params, context?: HttpContext): Observable<string> {
    return this.publicHealthCheck4$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `healthCheck()` */
  static readonly HealthCheckPath = '/health-check';

  /**
   * Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthCheck()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck$Response(params?: HealthCheck$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return healthCheck(this.http, this.rootUrl, params, context);
  }

  /**
   * Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthCheck$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck(params?: HealthCheck$Params, context?: HttpContext): Observable<string> {
    return this.healthCheck$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `healthCheck2()` */
  static readonly HealthCheck2Path = '/health-check';

  /**
   * Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthCheck2()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck2$Response(params?: HealthCheck2$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return healthCheck2(this.http, this.rootUrl, params, context);
  }

  /**
   * Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthCheck2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck2(params?: HealthCheck2$Params, context?: HttpContext): Observable<string> {
    return this.healthCheck2$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `healthCheck1()` */
  static readonly HealthCheck1Path = '/health-check';

  /**
   * Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthCheck1()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck1$Response(params?: HealthCheck1$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return healthCheck1(this.http, this.rootUrl, params, context);
  }

  /**
   * Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthCheck1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck1(params?: HealthCheck1$Params, context?: HttpContext): Observable<string> {
    return this.healthCheck1$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `healthCheck3()` */
  static readonly HealthCheck3Path = '/health-check';

  /**
   * Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthCheck3()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck3$Response(params?: HealthCheck3$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return healthCheck3(this.http, this.rootUrl, params, context);
  }

  /**
   * Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthCheck3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck3(params?: HealthCheck3$Params, context?: HttpContext): Observable<string> {
    return this.healthCheck3$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `healthCheck6()` */
  static readonly HealthCheck6Path = '/health-check';

  /**
   * Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthCheck6()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck6$Response(params?: HealthCheck6$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return healthCheck6(this.http, this.rootUrl, params, context);
  }

  /**
   * Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthCheck6$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck6(params?: HealthCheck6$Params, context?: HttpContext): Observable<string> {
    return this.healthCheck6$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `healthCheck5()` */
  static readonly HealthCheck5Path = '/health-check';

  /**
   * Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthCheck5()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck5$Response(params?: HealthCheck5$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return healthCheck5(this.http, this.rootUrl, params, context);
  }

  /**
   * Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthCheck5$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck5(params?: HealthCheck5$Params, context?: HttpContext): Observable<string> {
    return this.healthCheck5$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `healthCheck4()` */
  static readonly HealthCheck4Path = '/health-check';

  /**
   * Health Check.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthCheck4()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck4$Response(params?: HealthCheck4$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return healthCheck4(this.http, this.rootUrl, params, context);
  }

  /**
   * Health Check.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthCheck4$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthCheck4(params?: HealthCheck4$Params, context?: HttpContext): Observable<string> {
    return this.healthCheck4$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
